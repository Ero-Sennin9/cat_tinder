// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../dto/breed.dart';
import '../dto/cat.dart';
import '../dto/disliked_cat.dart';
import '../dto/liked_cat.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5943985208026009747),
    name: 'DislikedCat',
    lastPropertyId: const obx_int.IdUid(3, 2233319831874415803),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4172986786780905815),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6194084485073389196),
        name: 'dislikeTime',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2233319831874415803),
        name: 'catId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 1367775320876467738),
        relationTarget: 'Cat',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 603958136192363243),
    name: 'LikedCat',
    lastPropertyId: const obx_int.IdUid(3, 3518041380266712790),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5820996624301660625),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1461140095061910589),
        name: 'likeTime',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3518041380266712790),
        name: 'catId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 1054615127636623722),
        relationTarget: 'Cat',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 3066259618114721193),
    name: 'Cat',
    lastPropertyId: const obx_int.IdUid(3, 5462326218087478207),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6953949198917173798),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6065805848028891706),
        name: 'breedId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 5409494773931233254),
        relationTarget: 'Breed',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5462326218087478207),
        name: 'imageUrl',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 3431640112945572891),
    name: 'Breed',
    lastPropertyId: const obx_int.IdUid(7, 4794350812415938609),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3732227071220511562),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5192489831934535183),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3668806840587685267),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2452219774829269873),
        name: 'temperament',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 375037541886148071),
        name: 'origin',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4794350812415938609),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(4, 3431640112945572891),
    lastIndexId: const obx_int.IdUid(3, 1054615127636623722),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [790330402163978782],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    DislikedCat: obx_int.EntityDefinition<DislikedCat>(
      model: _entities[0],
      toOneRelations: (DislikedCat object) => [object.cat],
      toManyRelations: (DislikedCat object) => {},
      getId: (DislikedCat object) => object.id,
      setId: (DislikedCat object, int id) {
        object.id = id;
      },
      objectToFB: (DislikedCat object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.dislikeTime.millisecondsSinceEpoch);
        fbb.addInt64(2, object.cat.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dislikeTimeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final object = DislikedCat(dislikeTime: dislikeTimeParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.cat.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.cat.attach(store);
        return object;
      },
    ),
    LikedCat: obx_int.EntityDefinition<LikedCat>(
      model: _entities[1],
      toOneRelations: (LikedCat object) => [object.cat],
      toManyRelations: (LikedCat object) => {},
      getId: (LikedCat object) => object.id,
      setId: (LikedCat object, int id) {
        object.id = id;
      },
      objectToFB: (LikedCat object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.likeTime.millisecondsSinceEpoch);
        fbb.addInt64(2, object.cat.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final likeTimeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final object = LikedCat(likeTime: likeTimeParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.cat.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.cat.attach(store);
        return object;
      },
    ),
    Cat: obx_int.EntityDefinition<Cat>(
      model: _entities[2],
      toOneRelations: (Cat object) => [object.breed],
      toManyRelations: (Cat object) => {},
      getId: (Cat object) => object.id,
      setId: (Cat object, int id) {
        object.id = id;
      },
      objectToFB: (Cat object, fb.Builder fbb) {
        final imageUrlOffset = fbb.writeString(object.imageUrl);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.breed.targetId);
        fbb.addOffset(2, imageUrlOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final imageUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = Cat(imageUrl: imageUrlParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.breed.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.breed.attach(store);
        return object;
      },
    ),
    Breed: obx_int.EntityDefinition<Breed>(
      model: _entities[3],
      toOneRelations: (Breed object) => [],
      toManyRelations: (Breed object) => {},
      getId: (Breed object) => object.objectBoxId,
      setId: (Breed object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (Breed object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = fbb.writeString(object.description);
        final temperamentOffset = fbb.writeString(object.temperament);
        final originOffset = fbb.writeString(object.origin);
        fbb.startTable(8);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, nameOffset);
        fbb.addOffset(3, descriptionOffset);
        fbb.addOffset(4, temperamentOffset);
        fbb.addOffset(5, originOffset);
        fbb.addInt64(6, object.objectBoxId);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final temperamentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final originParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final object = Breed(
            id: idParam,
            name: nameParam,
            description: descriptionParam,
            temperament: temperamentParam,
            origin: originParam,
          )
          ..objectBoxId = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            16,
            0,
          );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DislikedCat] entity fields to define ObjectBox queries.
class DislikedCat_ {
  /// See [DislikedCat.id].
  static final id = obx.QueryIntegerProperty<DislikedCat>(
    _entities[0].properties[0],
  );

  /// See [DislikedCat.dislikeTime].
  static final dislikeTime = obx.QueryDateProperty<DislikedCat>(
    _entities[0].properties[1],
  );

  /// See [DislikedCat.cat].
  static final cat = obx.QueryRelationToOne<DislikedCat, Cat>(
    _entities[0].properties[2],
  );
}

/// [LikedCat] entity fields to define ObjectBox queries.
class LikedCat_ {
  /// See [LikedCat.id].
  static final id = obx.QueryIntegerProperty<LikedCat>(
    _entities[1].properties[0],
  );

  /// See [LikedCat.likeTime].
  static final likeTime = obx.QueryDateProperty<LikedCat>(
    _entities[1].properties[1],
  );

  /// See [LikedCat.cat].
  static final cat = obx.QueryRelationToOne<LikedCat, Cat>(
    _entities[1].properties[2],
  );
}

/// [Cat] entity fields to define ObjectBox queries.
class Cat_ {
  /// See [Cat.id].
  static final id = obx.QueryIntegerProperty<Cat>(_entities[2].properties[0]);

  /// See [Cat.breed].
  static final breed = obx.QueryRelationToOne<Cat, Breed>(
    _entities[2].properties[1],
  );

  /// See [Cat.imageUrl].
  static final imageUrl = obx.QueryStringProperty<Cat>(
    _entities[2].properties[2],
  );
}

/// [Breed] entity fields to define ObjectBox queries.
class Breed_ {
  /// See [Breed.id].
  static final id = obx.QueryStringProperty<Breed>(_entities[3].properties[0]);

  /// See [Breed.name].
  static final name = obx.QueryStringProperty<Breed>(
    _entities[3].properties[1],
  );

  /// See [Breed.description].
  static final description = obx.QueryStringProperty<Breed>(
    _entities[3].properties[2],
  );

  /// See [Breed.temperament].
  static final temperament = obx.QueryStringProperty<Breed>(
    _entities[3].properties[3],
  );

  /// See [Breed.origin].
  static final origin = obx.QueryStringProperty<Breed>(
    _entities[3].properties[4],
  );

  /// See [Breed.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<Breed>(
    _entities[3].properties[5],
  );
}
